"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetURLMetadataPropsStruct = exports.UploadFileSuccessResponseStruct = exports.UploadPropsStruct = exports.AuthPayloadStruct = exports.AuthPrivateClaimsStruct = exports.AuthReservervedClaimsStruct = exports.AuthHeaderStruct = void 0;
const s = __importStar(require("superstruct"));
const assert_type_1 = require("@thesunny/assert-type");
/**
 * Auth JWT Header
 */
exports.AuthHeaderStruct = s.object({
    typ: s.literal("JWT"),
    alg: s.literal("HS256"),
    kid: s.string(),
});
assert_type_1.AssertType.Equal(true);
/**
 * Auth JWT Payload
 */
exports.AuthReservervedClaimsStruct = s.object({
    iat: s.number(),
    exp: s.number(),
});
exports.AuthPrivateClaimsStruct = s.object({
    path: s.optional(s.string()),
    maxFileBytes: s.optional(s.number()),
    maxFileBytesMessage: s.optional(s.string()),
    maxImageSize: s.optional(s.object({
        width: s.number(),
        height: s.number(),
    })),
    tags: s.optional(s.array(s.string())),
    tagLimits: s.optional(s.array(s.object({
        tag: s.string(),
        maxTagBytes: s.number(),
        maxTagBytesMessage: s.optional(s.string()),
    }))),
});
exports.AuthPayloadStruct = s.assign(exports.AuthPrivateClaimsStruct, exports.AuthReservervedClaimsStruct);
assert_type_1.AssertType.Equal(true);
/**
 * UploadImageProps
 */
exports.UploadPropsStruct = s.object({
    apiKey: s.optional(s.string()),
    authToken: s.optional(s.string()),
    data: s.object({
        clientFileInfo: s.union([
            s.object({
                type: s.literal("generic"),
                filename: s.string(),
                contentType: s.string(),
                bytes: s.number(),
            }),
            s.object({
                type: s.literal("image"),
                filename: s.string(),
                contentType: s.string(),
                bytes: s.number(),
                width: s.number(),
                height: s.number(),
            }),
        ]),
    }),
});
assert_type_1.AssertType.Equal(true);
/**
 * UploadFileSuccessResponse
 */
exports.UploadFileSuccessResponseStruct = s.object({
    status: s.literal("success"),
    data: s.object({
        formFields: s.record(s.string(), s.string()),
        apiUrl: s.string(),
        fileUrl: s.string(),
    }),
});
assert_type_1.AssertType.Equal(true);
/**
 * GetURLMetadataProps
 */
exports.GetURLMetadataPropsStruct = s.object({
    authToken: s.string(),
    url: s.string(),
});
assert_type_1.AssertType.Equal(true);
