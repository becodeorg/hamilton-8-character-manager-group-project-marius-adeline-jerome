import { Simplify } from "superstruct/lib/utils";
/**
 * Standard JWT fields
 * https://en.wikipedia.org/wiki/JSON_Web_Token#Standard_fields
 *
 * JWT Claims
 * https://www.iana.org/assignments/jwt/jwt.xhtml
 *
 * iss: Issuer
 * sub: Subject
 * aud: Audience
 * exp: Expiration Time
 * nbf: Not Before
 * iat: Issued At
 * jti: JWT ID
 *
 * Commonly used header fields:
 *
 * typ: Token type
 * cty: Content Type
 * alg: Algorithm
 * kid: Key Id
 *
 * Our usage:
 *
 * iss: id of the
 * exp: Expiry (seconds since epoch)
 * iat: Date/Time issued at (seconds since epoch)
 */
/**
 * JWT Auth Header
 */
export declare type AuthHeader = {
    typ: "JWT";
    alg: "HS256";
    kid: string;
};
/**
 * JWT Reserved Claims in Payload
 *
 * Reserved claims are ones that are part of the official JWT specification.
 */
export declare type AuthReservedClaims = {
    iat: number;
    exp: number;
};
/**
 * JWT Private Claims in Payload
 *
 * Private claims are ones that we defined
 */
export declare type AuthPrivateClaims = {
    path?: string;
    maxFileBytes?: number | undefined;
    maxFileBytesMessage?: string | undefined;
    maxImageSize?: {
        width: number;
        height: number;
    } | undefined;
    tags?: string[] | undefined;
    tagLimits?: TagLimit[] | undefined;
};
/**
 * Part of the private claims that allows us to define the upload limits for
 * a given tag. These can be used to limit, for example, the maximum amount a
 * user can upload, or the maximum amount that can be uploaded to a specific
 * website, team or app.
 */
export declare type TagLimit = {
    tag: string;
    maxTagBytes: number;
    maxTagBytesMessage?: string;
};
/**
 * Auth Payload
 */
export declare type AuthPayload = Simplify<AuthPrivateClaims & AuthReservedClaims>;
